#!/liulab/alynch/projects/benchmarking_python/bin/python

import sys
sys.path.insert(0, '/liulab/alynch/projects/benchmarking/MIRA/')

import anndata
import scanpy as sc
import mira
import numpy as np
import pandas as pd
import os
import dynclipy as dyn
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import pairwise_distances

def centered_boxcox_transform(x, a = 'log'):

    if a == 'log' or a == 0:
        return np.log(x) - np.log(x).mean(-1, keepdims = True)

    else:

        assert(isinstance(a, float) and a > 0 and a < 1)
        x = (x**a)/(x**a).mean(-1, keepdims = True)
        return ( x - 1 )/a


def gram_schmidt_basis(n):
    basis = np.zeros((n, n-1))
    for j in range(n-1):
        i = j + 1
        e = np.array([(1/i)]*i + [-1] +
                    [0]*(n-i-1))*np.sqrt(i/(i+1))
        basis[:, j] = e
    return basis

def get_umap_features(topics, a):
    g_matrix = gram_schmidt_basis(topics.shape[-1])
    return centered_boxcox_transform(topics, a = a).dot(g_matrix)

def l2_norm(x):
    return x / np.linalg.norm(x, axis = 1, keepdims = True)

def harmonize_end_cells(data, user_end_cells):
    
    mira_end_cells = mira.time.find_terminal_cells(data, seed = 0, threshold=1e-2, iterations = 10)
    
    data.uns['mira_end_cells'] = mira_end_cells
    data.uns['user_end_cells'] = user_end_cells
    
    term_cells = list(np.intersect1d(mira_end_cells, user_end_cells))
    mira_end_cells = [x for x in mira_end_cells if not x in term_cells]
    user_end_cells = [x for x in user_end_cells if not x in term_cells]
    
    n_user, n_mira = len(user_end_cells), len(mira_end_cells)
    n_cells = n_user + n_mira
    all_cells = list(user_end_cells) + list(mira_end_cells)
    
    no_mira_connections_mask = np.vstack([
        np.ones((n_user, n_user + n_mira)),
        np.hstack([
                np.ones((n_mira, n_user)), np.zeros((n_mira, n_mira))
            ])
        ])
    
    dist_matrix = pairwise_distances(
        np.vstack([
            data[user_end_cells].obsm['X_diffmap'], 
            data[mira_end_cells].obsm['X_diffmap']])
        )

    adj = pd.DataFrame(np.exp(-dist_matrix**2/(2*np.mean(dist_matrix))) * (1-np.eye(n_cells)) * no_mira_connections_mask, 
                       columns = all_cells, index = all_cells)
    
    NNs = pd.Series(index = adj.columns, data = adj.columns[adj.values.argmax(0)])
    is_mnn = NNs[NNs.values].values == NNs.index
    
    for m1, m2 in NNs[is_mnn].items():
        if m1 in user_end_cells and m2 in user_end_cells:
            if data[m1].obs.mira_pseudotime[0] > data[m2].obs.mira_pseudotime[0]:
                term_cells.append(m1)
            else:
                term_cells.append(m2)
        elif m1 in mira_end_cells and m2 in mira_end_cells:
            pass
        elif m1 in mira_end_cells:
            term_cells.append(m1)
        else:
            term_cells.append(m2)

    return list(set(term_cells))


def process_dimred(data, 
    are_topic_compositions = True, 
    use_rep = 'joint',
    box_cox = 0.5):

    if are_topic_compositions:

        topics = data.obsm['dimred']
        divider_col = np.argwhere(np.isclose(topics, 0).all(0))[0,0]

        if use_rep == 'joint' or use_rep == 'joint_constrained':
            if divider_col == 0 or divider_col == topics.shape[-1]-1:
                raise ValueError('User wanted to use "joint" representation, but only one representation was given')

            rep1, rep2 = topics[:, :divider_col], topics[:,divider_col+1:]

            if use_rep == 'joint':
                data.obsm['embedding_features'] = np.hstack([
                    get_umap_features(rep1, box_cox), 
                    get_umap_features(rep2, box_cox)]
                )
            else:
                data.obsm['embedding_features'] = np.hstack([
                    l2_norm(get_umap_features(rep1, box_cox)), 
                    l2_norm(get_umap_features(rep2, box_cox))]
                )

        elif use_rep == 'RNA':
            data.obsm['embedding_features'] = get_umap_features(topics[:, :divider_col], box_cox)
        elif use_rep == 'ATAC':
            data.obsm['embedding_features'] = get_umap_features(topics[:, divider_col+1:], box_cox)
        else:
            raise ValueError('Representation {} is unknown.'.format(use_rep))

        #print(data.obsm['embedding_features'], data.obsm['embedding_features'].shape, data.obs_names)

    else:
        data.obsm['embedding_features'] = data.obsm['dimred']


def extend_classifications(data):
    
    maybe_root = data.obs.tree_states.str.split(',').str.len() == data.obs.tree_states.str.split(',').str.len().max()
    
    tree = data.uns['connectivities_tree']
    min_split = np.where(tree <= 0, np.inf, tree).min()
    
    extend = maybe_root & (data.obs.mira_pseudotime > min_split)
    
    if extend.sum() > 0:
        features = data.obsm['embedding_features']
        imputed_state = KNeighborsClassifier(30)\
            .fit(features[~extend], data[~extend].obs.tree_states.values)\
            .predict(features[extend])
        
        data.obs['tree_states'][extend] = imputed_state


def run_pseudotime(data, start_cell, end_cells, ka = 5, 
    threshold = 0.58, n_neighbors = 30, metric = 'manhattan'):

    sc.pp.neighbors(data, use_rep='embedding_features', metric=metric,
        n_neighbors=n_neighbors)

    sc.tl.umap(data, min_dist = 0.1, negative_sample_rate=1)
    
    sc.tl.diffmap(data, n_comps=9)
    mira.time.normalize_diffmap(data)
  
    data.obsm['X_diffmap'] = data.obsm['X_diffmap'][:,:data.uns['eigen_gap'][3:].argmax() + 3]
    sc.pp.neighbors(data, use_rep = 'X_diffmap', key_added = 'X_diffmap',
                   n_neighbors = n_neighbors)

    mira.time.get_connected_components(data)
    mira.time.get_transport_map(data,
                                start_cell = start_cell, ka = ka)
    
    end_cells = harmonize_end_cells(data, end_cells)

    mira.time.get_branch_probabilities(data, 
                terminal_cells={str(t) : t for t in end_cells}
        )

    mira.time.get_tree_structure(data, threshold = threshold)
    
    extend_classifications(data)


def format_results(adata):

    cell_ids = adata.obs_names.values.astype(str)
    tree_matrix = adata.uns['connectivities_tree'][:-1,:-1]
    branch_names = adata.uns['tree_state_names'][:-1]
    branch_tips = adata.obs.groupby('tree_states')['mira_pseudotime'].max()

    try:
        branch_start_time = dict(zip(branch_names, tree_matrix.max(0)))
        branch_end_time = {
            state : branch_tips[state] if end_time == 0 else end_time
            for state, end_time in zip(branch_names, tree_matrix.max(-1))
        }

        def progress(state, time):
            return np.clip(
                (time - branch_start_time[state])/(branch_end_time[state] - branch_start_time[state]),
                a_min = 0, a_max = 1.
            )

        percentage = np.array(
            [progress(state, time) 
            for state, time in zip(adata.obs_vector('tree_states'), adata.obs_vector('mira_pseudotime'))]
        )
    except KeyError:
        min_time, max_time = adata.obs.mira_pseudotime.values.min(), adata.obs.mira_pseudotime.values.max()
        percentage = (adata.obs.mira_pseudotime.values - min_time)/(max_time - min_time)

    branch_progressions = pd.DataFrame(
        {
            'cell_id' : cell_ids, 
            'branch_id' : adata.obs.tree_states.values,
            'percentage' : percentage
        }
    )

    branch_names =  adata.uns['tree_state_names'][:-1]
    branches_df = pd.DataFrame(
        {'branch_id' : branch_names, 
        'directed' : [True]*len(branch_names), 
        'length' : [1]*len(branch_names)}
    )

    edges = (
                pd.DataFrame(
                    tree_matrix, index =branch_names,
                    columns = branch_names
                ) > 0
            ).melt(
                ignore_index = False, 
                var_name = 'to', 
                value_name = 'has_edge'
            ).reset_index().rename(columns = {'index' : 'from'})

    edges = edges[edges.has_edge].drop(columns = 'has_edge')

    dimred = pd.DataFrame(adata.obsm['X_umap'])
    dimred['cell_id'] = cell_ids

    dyn.wrap_data(cell_ids = cell_ids)\
    .add_dimred(dimred)\
    .add_grouping(
        pd.DataFrame(
            {
                'group_id' : adata.obs.tree_states.values.astype(str), 
                'cell_id' : cell_ids
            }))\
    .add_branch_trajectory(
        branch_network = edges,
        branches = branches_df,
        branch_progressions = branch_progressions)\
    .write_output(dataset['output'])


def main(
    adata,
    start_cell,
    end_cells,
    threshold = 0.58,
    n_neighbors = 15,
    metric = 'manhattan',
    are_topic_compositions = True,
    box_cox = 0.5,
    use_rep = 'joint',
):

    process_dimred(adata, 
        are_topic_compositions = are_topic_compositions, 
        use_rep = use_rep,
        box_cox = box_cox)

    run_pseudotime(adata, start_cell, end_cells, metric = metric,
            threshold = threshold, n_neighbors = n_neighbors)

    format_results(adata)


if __name__ == "__main__":

    dataset = dyn.main(definition_location=\
        '/liulab/alynch/projects/benchmarking/frankencell-dynverse/frankencell/methods/mira/definition.yaml')

    params = dataset['parameters']
    priors = dataset['priors']
    rna_counts = dataset['counts']
    N = len(rna_counts)

    dimred = np.array(dataset['priors']['dimred']).reshape((-1, N)).T

    adata = anndata.AnnData(
        obs = pd.DataFrame(index = rna_counts.index.values), obsm = {'dimred' : dimred}
    )

    main(
        adata,
        priors['start_id'],
        priors['end_id'],
        threshold = params['treshold'],
        n_neighbors = params['n_neighbors'],
        metric = params['metric'],
        are_topic_compositions = params['are_topic_compositions'],
        box_cox = params['box_cox'],
        use_rep = params['use_rep']
    )
