
import yaml
configfile: "frankencell/pipeline/easyconfig.yaml"

def write_scaffold_config(config, prefix, scaffold):
    
    with open('{prefix}.{scaffold}.yaml'.format(
                prefix=prefix, scaffold=scaffold),'w') as f:
        yaml.dump({
            **config['default_scaffold_parameters'],
            **config['scaffolds'][scaffold],
            'output_path' : '{prefix}.{scaffold}.h5'.format(prefix=prefix, scaffold=scaffold)
        }, f)


def write_test_config(config, prefix, scaffold, test, replicate):
    
    with open('{prefix}.{scaffold}.{test}-{rep}.yaml'.format(
                prefix=prefix, scaffold=scaffold, test=test, rep=replicate),'w') as f:
        yaml.dump({
            **config['default_test_parameters'],
            **config['test_conditions'][test],
            'scaffold' : '{prefix}.{scaffold}.h5'.format(prefix = prefix, scaffold = scaffold),
            'output_path' : '{prefix}.{scaffold}.{test}-{rep}.h5'.format(
                prefix=prefix, scaffold=scaffold, test=test, rep=replicate),
            'seed' : replicate + 1775,
        }, f)
        
def write_preprocess_config(config, prefix, 
                        scaffold, test, replicate, preprocess):

    with open('{prefix}.{scaffold}.{test}-{rep}.{preprocess}.yaml'.format(
                prefix=prefix, scaffold=scaffold, test=test, 
                preprocess=preprocess, rep=replicate),'w') as f:
        yaml.dump({
            **config['default_preprocessing_parameters'],
            **config['preprocessing'][preprocess]['parameters'],
            'dynframe_path' : '{prefix}.{scaffold}.{test}-{rep}.h5'.format(
                prefix=prefix, scaffold=scaffold, test=test, rep=replicate),
            'output_path' : '{prefix}.{scaffold}.{test}-{rep}.{preprocess}.h5'.format(
                prefix=prefix, scaffold=scaffold, 
                test=test, preprocess=preprocess, rep=replicate)
        }, f)

def write_method_config(config, prefix, scaffold, test, replicate, method,
                       trial):
    
    preprocess = config['methods'][method]['trials'][trial]['preprocessing']

    write_scaffold_config(config, prefix, scaffold)
    write_test_config(config, prefix, scaffold, test, replicate)
    write_preprocess_config(config, prefix, scaffold, test, replicate,
                           preprocess)
    
    result_file = '{prefix}.{scaffold}.{test}-{rep}.{preprocess}.{method}.{trial}.results.csv'.format(
                prefix=prefix, scaffold=scaffold, test=test, rep=replicate,
                preprocess=preprocess, method = method, trial = trial)
    
    with open('{prefix}.{scaffold}.{test}-{rep}.{preprocess}.{method}.{trial}.yaml'.format(
                prefix=prefix, scaffold=scaffold, test=test, rep=replicate,
                preprocess=preprocess, method=method, trial=trial),'w') as f:
        yaml.dump({**config['default_method_parameters'],
         'run_file' : config['methods'][method]['run_file'],
         'definition_file' : config['methods'][method]['definition_file'],
         'goldstandard' : '{prefix}.{scaffold}.h5'.format(prefix=prefix, scaffold=scaffold),
         'test_dataset' : '{prefix}.{scaffold}.{test}-{rep}.{preprocess}.h5'.format(
                prefix=prefix, scaffold=scaffold, 
                test=test, preprocess=preprocess, rep=replicate),
         'method_output_path' : '{prefix}.{scaffold}.{test}-{rep}.{preprocess}.{method}.{trial}.h5'.format(
                prefix=prefix, scaffold=scaffold, test=test, 
                preprocess=preprocess, method = method, 
                trial = trial, rep=replicate),
         'results_output_path' : result_file,
         'param_string' : config['methods'][method]['trials'][trial]['parameters']
        }, f)
        
    return result_file


def set_up_trials(config):

    results_files = []
    prefix = config['prefix']
    for scaffold in config['scaffolds']:
        for test in config['test_conditions']:
            for replicate in range(1, config['test_replicates'] + 1):
                for method in config['methods']:
                    for trial in config['methods'][method]['trials']:
                        #print(prefix, scaffold, test, replicate, method, trial)
                        results_files.append(
                            write_method_config(
                                config, prefix, scaffold, test, replicate, method, trial
                            )
                        )

    return results_files

targets = set_up_trials(config)
prefix = config['prefix']

rule all:
    input : targets

wildcard_constraints:
    scaffold="\w+"

wildcard_constraints:
    preprocess="\w+"

wildcard_constraints:
    trial="\w+"

wildcard_constraints:
    method="\w+"

wildcard_constraints:
    test="\w+-\d+"


def define_input(w):

    path = "{prefix}.{scaffold}.yaml"\
                .format(prefix = prefix, scaffold = w.scaffold)
    
    if config['restart']:
        return path
    else:
        return ancient(path)

rule make_scaffold :
    input : 
        args = define_input
    output : 
        "{prefix}.{scaffold}.h5"
    shell : 
        "./franken-cells-yaml scaffold {input.args}"

rule make_test : 
    input : 
        "{prefix}.{scaffold}.h5"
    output : 
        "{prefix}.{scaffold}.{test}.h5"
    params : 
        args = "{prefix}.{scaffold}.{test}.yaml"
    shell : 
        "./franken-cells-yaml mix-cells {params.args}"

rule preprocess : 
    input : 
        "{prefix}.{scaffold}.{test}.h5"
    output : 
        "{prefix}.{scaffold}.{test}.{preprocess}.h5"
    params : 
        script = lambda w : config['preprocessing'][w.preprocess]['script'],
        args = "{prefix}.{scaffold}.{test}.{preprocess}.yaml"
    shell : 
        "./franken-cells-yaml {params.script} {params.args}"


rule evaluate :
    input : 
         "{prefix}.{scaffold}.{test}.{preprocess}.h5"
    output : 
        "{prefix}.{scaffold}.{test}.{preprocess}.{method}.{trial}.results.csv"
    params : 
        args = "{prefix}.{scaffold}.{test}.{preprocess}.{method}.{trial}.yaml"
    shell: 
        "./franken-cells-yaml evaluate {params.args}"

ruleorder :  make_scaffold > make_test > preprocess > evaluate