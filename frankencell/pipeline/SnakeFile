import yaml
import os
#configfile: "frankencell/pipeline/2022-03-08_experiment_no_MIRA.yaml"
prefix = config['prefix']

SCAFFOLD_PATH = prefix+'scaffolds/{scaffold}.h5'
TEST_PATH = prefix+'tests/{scaffold}.{test}-{rep}.h5'
PREPROCESS_PATH = prefix+'preprocessed/{scaffold}.{test}-{rep}.{preprocess}.h5'
EVALUATION_PATH = prefix+'evaluations/{scaffold}.{test}-{rep}.{preprocess}.{method}.{trial}.h5'
RESULTS_PATH = prefix + 'results/{scaffold}.{test}-{rep}.{preprocess}.{method}.{trial}.results.csv'

configdir_path = prefix + 'configs/'
if not os.path.isdir(configdir_path):
    os.mkdir(configdir_path)
SCAFFOLD_CONFIG = configdir_path + '{scaffold}.yaml'
TEST_CONFIG = configdir_path + '{scaffold}.{test}-{rep}.yaml'
PREPROCESS_CONFIG = configdir_path + '{scaffold}.{test}-{rep}.{preprocess}.yaml'
RESULTS_CONFIG = configdir_path + '{scaffold}.{test}-{rep}.{preprocess}.{method}.{trial}.yaml'

logs_path = prefix + 'logs/'
SCAFFOLD_LOGS = logs_path + 'scaffolds/{scaffold}.yaml'
TEST_LOGS = logs_path + 'tests/{scaffold}.{test}-{rep}.yaml'
PREPROCESS_LOGS = logs_path + 'preprocessing/{scaffold}.{test}-{rep}.{preprocess}.yaml'
RESULTS_LOGS = logs_path + 'results/{scaffold}.{test}-{rep}.{preprocess}.{method}.{trial}.yaml'

def write_scaffold_config(config, prefix, scaffold):
    
    with open(SCAFFOLD_CONFIG.format(
                prefix=prefix, scaffold=scaffold),'w') as f:
        yaml.dump({
            **config['default_scaffold_parameters'],
            **config['scaffolds'][scaffold],
            'output_path' : SCAFFOLD_PATH.format(scaffold=scaffold)
        }, f)


def write_test_config(config, prefix, scaffold, test, replicate):
    
    with open(TEST_CONFIG.format(
                prefix=prefix, scaffold=scaffold, test=test, rep=replicate),'w') as f:
        yaml.dump({
            **config['default_test_parameters'],
            **config['test_conditions'][test],
            'scaffold' : SCAFFOLD_PATH.format(scaffold=scaffold),
            'output_path' : TEST_PATH.format(
                scaffold=scaffold, test=test, rep=replicate),
            'seed' : replicate + 1775,
        }, f)
        
def write_preprocess_config(config, prefix, 
                        scaffold, test, replicate, preprocess):

    with open(PREPROCESS_CONFIG.format(
                prefix=prefix, scaffold=scaffold, test=test, 
                preprocess=preprocess, rep=replicate),'w') as f:
        yaml.dump({
            **config['default_preprocessing_parameters'],
            **config['preprocessing'][preprocess]['parameters'],
            'dynframe_path' : TEST_PATH.format(scaffold=scaffold, test=test, rep=replicate),
            'output_path' : PREPROCESS_PATH.format(
                scaffold=scaffold, test=test, preprocess=preprocess, rep=replicate)
        }, f)

def write_method_config(config, prefix, scaffold, test, replicate, method,
                       trial):
    
    preprocess = config['methods'][method]['trials'][trial]['preprocessing']

    write_scaffold_config(config, prefix, scaffold)
    write_test_config(config, prefix, scaffold, test, replicate)
    write_preprocess_config(config, prefix, scaffold, test, replicate,
                           preprocess)
    
    result_file = RESULTS_PATH.format(scaffold=scaffold, test=test, rep=replicate,
                preprocess=preprocess, method = method, trial = trial)
    
    with open(RESULTS_CONFIG.format(
                prefix=prefix, scaffold=scaffold, test=test, rep=replicate,
                preprocess=preprocess, method=method, trial=trial),'w') as f:
        yaml.dump({**config['default_method_parameters'],
         'run_file' : config['methods'][method]['run_file'],
         'definition_file' : config['methods'][method]['definition_file'],
         'goldstandard' : SCAFFOLD_PATH.format(scaffold=scaffold),
         'test_dataset' : PREPROCESS_PATH.format(scaffold=scaffold, test=test, preprocess=preprocess, rep=replicate),
         'method_output_path' : EVALUATION_PATH.format(
                scaffold=scaffold, test=test, 
                preprocess=preprocess, method = method, 
                trial = trial, rep=replicate),
         'results_output_path' : result_file,
         'param_string' : config['methods'][method]['trials'][trial]['parameters']
        }, f)
        
    return result_file


def set_up_trials(config):

    results_files = []
    prefix = config['prefix']
    for scaffold in config['scaffolds']:
        for test in config['test_conditions']:
            for replicate in range(1, config['test_replicates'] + 1):
                for method in config['methods']:
                    for trial in config['methods'][method]['trials']:
                        #print(prefix, scaffold, test, replicate, method, trial)
                        results_files.append(
                            write_method_config(
                                config, prefix, scaffold, test, replicate, method, trial
                            )
                        )

    return results_files

targets = set_up_trials(config)


def scale_mem_mb(wildcards, attempt, base_mem = 1000):
    return base_mem * attempt
from functools import partial


wildcard_constraints:
    scaffold="\w+",
    preprocess="\w+",
    trial="\w+",
    method="\w+",
    test="\w+",
    rep="\d+"

rule all:
    input : targets

rule make_scaffold :
    input : 
        args = ancient(SCAFFOLD_CONFIG) if not config['restart'] else SCAFFOLD_CONFIG
    output : 
        SCAFFOLD_PATH
    log : SCAFFOLD_LOGS
    resources:
        mem_mb = partial(scale_mem_mb, base_mem = 1000),
        cpus = 1
    envmodules:
        "hdf5/1.10.1",
        "R/4.0.4"
    conda:
        config['conda_env']
    shell : 
        "./franken-cells-yaml scaffold {input.args}"

rule make_test : 
    input : 
        SCAFFOLD_PATH
    output : 
        TEST_PATH
    params : 
        args = TEST_CONFIG
    threads : 5
    resources:
        mem_mb = partial(scale_mem_mb, base_mem = 5000),
        cpus = 5
    conda:
        config['conda_env']
    envmodules:
        "hdf5/1.10.1",
        "R/4.0.4"
    log : TEST_LOGS
    shell : 
        "./franken-cells-yaml mix-cells {params.args}"

rule preprocess : 
    input : 
        TEST_PATH
    output : 
        PREPROCESS_PATH
    params : 
        script = lambda w : config['preprocessing'][w.preprocess]['script'],
        args = PREPROCESS_CONFIG
    resources : 
        concurrent_jobs = lambda w : config['preprocessing'][w.preprocess]['concurrent_job_penalty'],
        mem_mb = partial(scale_mem_mb, base_mem = 2000),
        cpus = 1
    conda:
        config['conda_env']
    envmodules:
        "hdf5/1.10.1",
        "R/4.0.4"
    log : PREPROCESS_LOGS
    shell : 
        "./franken-cells-yaml {params.script} {params.args}"

rule evaluate :
    input : 
        PREPROCESS_PATH
    output : 
        results = RESULTS_PATH,
        final_h5 = EVALUATION_PATH
    params : 
        args = RESULTS_CONFIG
    log : RESULTS_LOGS
    resources :
        mem_mb = partial(scale_mem_mb, base_mem = 2000),
        cpus = 1
    conda:
        config['conda_env']
    envmodules:
        "hdf5/1.10.1",
        "R/4.0.4"
    shell: 
        "./franken-cells-yaml evaluate {params.args}"

ruleorder :  make_scaffold > make_test > preprocess > evaluate
